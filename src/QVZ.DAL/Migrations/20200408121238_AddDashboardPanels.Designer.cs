// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QVZ.DAL;

namespace QVZ.DAL.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20200408121238_AddDashboardPanels")]
    partial class AddDashboardPanels
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("QVZ.DAL.Entities.Dashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(120)")
                        .HasMaxLength(120);

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("UserCreatedById")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("UserUpdatedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedById");

                    b.HasIndex("UserUpdatedById");

                    b.HasIndex("UserId", "Name")
                        .IsUnique();

                    b.ToTable("Dashboards");
                });

            modelBuilder.Entity("QVZ.DAL.Entities.DashboardPanel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<int>("DashboardId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.HasIndex("TypeId");

                    b.ToTable("DashboardPanels");
                });

            modelBuilder.Entity("QVZ.DAL.Entities.DashboardPanelPosition", b =>
                {
                    b.Property<int>("PanelId")
                        .HasColumnType("int");

                    b.Property<int>("Left")
                        .HasColumnType("int");

                    b.Property<int>("Top")
                        .HasColumnType("int");

                    b.HasKey("PanelId");

                    b.ToTable("DashboardPanelPosition");
                });

            modelBuilder.Entity("QVZ.DAL.Entities.DashboardPanelType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("DashboardPanelTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2020, 4, 8, 12, 12, 37, 805, DateTimeKind.Utc).AddTicks(7045),
                            Guid = new Guid("89dbc8b3-3c47-4734-a45d-ae6348982fd5"),
                            Name = "Organizations",
                            UpdatedDate = new DateTime(2020, 4, 8, 12, 12, 37, 805, DateTimeKind.Utc).AddTicks(7045)
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2020, 4, 8, 12, 12, 37, 805, DateTimeKind.Utc).AddTicks(7045),
                            Guid = new Guid("daa76c7a-02a4-4d4e-8f31-491cf850b996"),
                            Name = "Users",
                            UpdatedDate = new DateTime(2020, 4, 8, 12, 12, 37, 805, DateTimeKind.Utc).AddTicks(7045)
                        });
                });

            modelBuilder.Entity("QVZ.DAL.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(120)")
                        .HasMaxLength(120);

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("UserCreatedById")
                        .HasColumnType("int");

                    b.Property<int>("UserUpdatedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedById");

                    b.HasIndex("UserUpdatedById");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("QVZ.DAL.Entities.ReferenceTables.OrganizationUserReference", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationUserReferences");
                });

            modelBuilder.Entity("QVZ.DAL.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("ObjectId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("QVZ.DAL.Entities.Dashboard", b =>
                {
                    b.HasOne("QVZ.DAL.Entities.User", "UserCreatedBy")
                        .WithMany()
                        .HasForeignKey("UserCreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QVZ.DAL.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QVZ.DAL.Entities.User", "UserUpdatedBy")
                        .WithMany()
                        .HasForeignKey("UserUpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("QVZ.DAL.Entities.DashboardPanel", b =>
                {
                    b.HasOne("QVZ.DAL.Entities.Dashboard", "Dashboard")
                        .WithMany("Panels")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QVZ.DAL.Entities.DashboardPanelType", "Type")
                        .WithMany("Panels")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QVZ.DAL.Entities.DashboardPanelPosition", b =>
                {
                    b.HasOne("QVZ.DAL.Entities.DashboardPanel", "Panel")
                        .WithOne("Position")
                        .HasForeignKey("QVZ.DAL.Entities.DashboardPanelPosition", "PanelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QVZ.DAL.Entities.Organization", b =>
                {
                    b.HasOne("QVZ.DAL.Entities.User", "UserCreatedBy")
                        .WithMany()
                        .HasForeignKey("UserCreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QVZ.DAL.Entities.User", "UserUpdatedBy")
                        .WithMany()
                        .HasForeignKey("UserUpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("QVZ.DAL.Entities.ReferenceTables.OrganizationUserReference", b =>
                {
                    b.HasOne("QVZ.DAL.Entities.Organization", "Organization")
                        .WithMany("UserReferences")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QVZ.DAL.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
